{
  "hash": "a6b1d49dc39ea4d469323ede3cedbb73",
  "result": {
    "markdown": "---\ntitle: \"Converting my blog from Jekyll to Quarto\"\ndate: \"2022-06-10\"\nauthor: \"Lucas A. Meyer\"\nfreeze: true\nimage: /images/quarto.png\n---\n\nI thought moving from Jekyll to Quarto was going to be hard. It was not.\n\n### What I wanted in a blog platform\nFor a long time, I had an unfulfilled wish list for a blog platform:\n\n- Can write posts in Markdown\n- Easy to deploy to Github\n- Can script in Python\n\n\nA large number of platforms fulfills the first two items, but I struggled to find one that fulfilled the last item. I finally found Pelican, but I found it too clunky and started to worry that it was not going to be maintained for long. Therefore, I oscillated between Jekyll and Hugo (using blogdown) for a long time. I liked blogdown a lot, but whenever I'm switching a lot between R and Python, my brain gets really unhappy.\n\n### Quarto has everything, and more \n\nRecently, I found [Quarto](https://quarto.org) that ticks all my boxes and solves a lot of other problems. My feeling when using Quarto must be similar to the feeling of Python programmers when they started using Jupyter (because they never used RStudio) or similar to what I felt when, as an analyst, started using RStudio. Things just work.\n\nWhen I was initially switching between Jekyll and Hugo, one of the most annoying things was Jekyll preferred posts as files, while blogdown preferred posts as directories. RStudio even provides a function `bundle_site()` to convert files to directories. Now, when I'm converting to Quarto, I thought I needed to write such a function in Python.\n\nAgain, it turns out that \"things just work\". Quarto accepts both directores and files as posts and rendered everything correctly. So I'm going to draw the \"Quarto Spiral\" instead, just to celebrate!\n\n### Example from Hello, Quarto!\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](2022-06-10-jekyll-to-quarto_files/figure-html/fig-polar-output-1.png){#fig-polar}\n:::\n:::\n\n\n",
    "supporting": [
      "2022-06-10-jekyll-to-quarto_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}