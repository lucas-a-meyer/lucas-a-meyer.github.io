{
  "hash": "1e1814380dedbdf15a21516638e4d45d",
  "result": {
    "markdown": "---\ntitle: \"Quarto with Python\"\ninclude-in-header: _msft-clarity.html\nauthor: Lucas A. Meyer\ndate: 2022-07-07\nself-contained: true\n---\n\n\n\n\n\n\n\nFolowing the spirit of [\"learning out loud\"](https://www.meyerperin.com/2019-02-13-why-you-should-blog-if-you-are-a-data-scientist.html), I created several artifacts while I was learning about [Quarto](https://www.quarto.org). \n\nI created one main content file [(source)](https://github.com/lucas-a-meyer/using-quarto/blob/main/_presentation-content.qmd) that imports lots of other topic-based [files](https://github.com/lucas-a-meyer/using-quarto/tree/main/slides), to create:\n\n- A RevealJS [presentation](presentation.html)\n- A [PowerPoint presentation](presentation.pptx) that uses my team's template\n- This website, starting after the \"Why Quarto\" header below [(source)](https://github.com/lucas-a-meyer/using-quarto/blob/main/index.qmd)\n\nI also reused some of the content above in another Quarto file [(source)](https://github.com/lucas-a-meyer/using-quarto/blob/main/article.qmd) to create a scholarly-looking [article](article.pdf) in PDF using LaTeX\n\n\nThe content below tells why I chose Quarto and how I use it with Python.\n\n# Why Quarto\n\n## The content value chain\n\n:::: {.columns}\n\n::: {.column}\n\nContent stuck in my computer is nearly worthless.\n\n### Goal\n\n- Move good content out of my computer **as fast as possible**\n- Reproducible\n- Git-based collaboration\n- Write once, generate:\n  - Code\n  - Paper\n  - PowerPoint\n  - Site/documentation\n:::\n\n::: {.column}\n![The content value chain by David Robinson (@drrob) captured by Amelia McNamara](images/content-value-chain.jpg)\n:::\n::::\n\n\n\n## Literate Programming\n\n:::: {.columns}\n\n::: {.column}\n\nLiterate programming can help create high-quality reproducible, documented code.\n\nDonald E. Knuth proposed literate programming in a 1984 [article](http://www.literateprogramming.com/knuthweb.pdf).\n\nJupyter implements the literate programming paradigm, but generating high-quality mass-consumable output (articles, websites) requires additional tools.\n\n:::\n\n::: {.column}\n![Donald Knuth's Literate Programming](images/literate-programming.jpg){width=70%}\n:::\n\n::::\n\n\n\n## I tried many tools for Literate Programming\n\n:::: {.columns}\n::: {.column}\n\n### LaTeX\n\n- Needs extra tools like CWeb\n- Great for PDFs... Beamer for slides\n- Not great for websites\n- Dynamic content -> code in Latex\n    - `\\usepackage{ifthen}`\n    - `@for`, `@while`\n\n### Python notebooks\n\n- Great, with Pandoc\n- Config separated from files\n\n:::\n::: {.column}\n\n### Word/PPT\n\n- Hard to collaborate before O365\n- Hard to reproduce / auto-generate \n  - code and writing separate\n\n### RMarkdown\n\n- Great for everything\n- Heavily dependent on R\n- New features in Quarto\n\n:::\n::::\n\n\n\n## Quarto\n\n:::: {.columns}\n\n::: {.column}\n\n[QuartoÂ®](https://www.quarto.org) is an open-source scientific and technical publishing system built on [Pandoc](https://pandoc.org/).\n\nThe name \"quarto\" comes from the format of a book or pamphlet printed with eight pages of text, four to a side, then folded twice to produce four leaves.\n\nThe earliest known European printed book, the Sibyllenbuch (Gutemberg, c.1452), was done in the quarto format. Shakespeare's plays, too!\n\n:::\n::: {.column}\n\nWith Quarto, you can:\n\n- Write Markdown and Python (or R, Julia, OJS)\n- Use equations, diagrams, citations, figures, etc.\n- Output articles, presentations, interactive websites...\n- Work with Jupyter Lab or VSCode\n\nYou can [install Quarto](https://quarto.org/docs/get-started/) on Linux, Windows and Mac.\n\n:::\n\n::::\n\n\n\n<!--\n## Also... the population project\n\n:::: {.columns}\n::: {.column}\n\n### Goals and questions\nExplore the consequences of the decline in population predicted to start\nat around 2100 for the world, but earlier in developed nations. \n\n- What are the economic impacts?\n- What should governments do?\n\n:::\n::: {.column}\n\n### Population project challenges\n\n- Unknown collaborators at the start\n- Need to go \"wide\" rather than \"deep\"\n- May need to pivot fast\n- May need to generate data on demand\n    - Show graphs for country X, Y and Z\n- Generate code, paper, PowerPoint\n\n:::\n::::\n:::::\n\n\n-->\n\n# Quarto workflow\n\n## The content pipeline for .ipynb\n\n:::: {.columns}\n::: {.column width=\"34%\"}\nAbout [75% of data scientists](https://visualstudiomagazine.com/articles/2021/02/09/kaggle-survey.aspx) use Python through Jupyter notebooks. \n\nWith some scripting, you can use [`Pandoc`](https://pandoc.org/index.html) on .ipynb files to generate papers, HTML, PowerPoint, etc.\n\nYou just need to learn Pandoc and shell scripting.\n\n::: {.content-visible when-format=\"revealjs\"}\nRefresh the page to see the diagram on the right.\n:::\n\n:::\n::: {.column width=\"66%\"}\n\n```{mermaid}\ngraph TD\n    A[.ipynb] --> B((\"Pandoc\"))\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    F --> G[.pdf]\n    I --> J[.html]\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF\n```\n:::\n::::\n\n\n\n\n## Quarto in Python, in a nutshell\n:::: {.columns}\n::: {.column width=\"34%\"}\nAll you need to use Quarto is to add some YAML (mostly simplified Pandoc configurations) to a `.qmd` file. \n\n`ipynb` + YAML = `.qmd`. \n\nThis keeps the configuration and content in the same file. You can then render the outputs using `quarto render <file.qmd>` in the command line.\n\n::: {.content-visible when-format=\"revealjs\"}\nRefresh the page to see the diagram on the right.\n:::\n\n:::\n::: {.column width=\"66%\"}\n```{mermaid}\ngraph TD\nQ[.qmd] --> A\nsubgraph Quarto\n    A[.ipynb] --> B((\"Pandoc\"))\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF\nend\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    F --> G[.pdf]\n    I --> J[.html]\n```\n:::\n::::\n\n\n\n# Using Quarto\n\n## The YAML front-matter\n\n:::: {.columns}\n::: {.column}\nQuarto `.qmd` files always start with a YAML front-matter. \n\nThe YAML configuration determines what's the output format of your document. A few popular output options are `html`, `pptx`, `docx`, and `pdf`. \n\n**You can use a single source file to generate multiple output types.**\n\nFor example, the YAML on the right will generate a PowerPoint file and a Revealjs presentation.\n:::\n::: {.column}\n```yaml\n---\ntitle: \"Quarto with Python\"\nformat: \n  pptx:\n    reference-doc: templates/template.pptx\n  revealjs:\n    incremental: false\n    theme: pulse\n\nauthor: Lucas A. Meyer\ndate: 2022-07-07\n---\n```\n:::\n::::\n\n\n\n## Main content\n\n:::: {.columns}\n\n::: {.column}\n### Writing content\n\nWrite content in [Markdown](https://quarto.org/docs/authoring/markdown-basics.html).\n\nQuarto's Markdown supports\nfigures, tables, bibliography, etc.\n\nIt also supports lots of extra features, like\ndiagrams with `mermaid` and `GraphViz`, and\neven LaTeX equations: \n\n$$\nE = mc^2\n$$\n::: \n\n::: {.column}\n```markdown\n### Writing content\n\nWrite content in [Markdown].\n\nQuarto's Markdown supports\nfigures, tables, bibliography, etc.       \n\nIt also supports lots of extra features, \nlike diagrams with `mermaid` and \n`GraphViz`, and even LaTeX equations: \n\n$$\nE = mc^2\n$$\n```\n:::\n::::\n\n\n\n## What if I want to add code?\n\n:::: {.columns}\n::: {.column}\n\nThe best thing about Quarto is that you can use it to run \nany code that you would be able to run in a Python notebook.\n\n```python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw=\\\n                {'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n```\n:::\n::: {.column}\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=450 height=439}\n:::\n:::\n\n\n:::\n::::\n\n\n\n## Diagrams\n\n:::: {.columns}\n\n::: {.column}\nYou can use [mermaid](https://github.com/mermaid-js/mermaid) to create diagrams. \n\nThe diagram in this and in previous sections were created with mermaid.\n\n::: {.content-visible when-format=\"revealjs\"}\nRefresh the page to see the diagram on the right.\n:::\n\n```mermaid\nflowchart TD\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\n:::\n\n::: {.column}\n\n```{mermaid}\nflowchart TD\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\n:::\n\n::::\n\n\n\n## Regression and results\n\n:::: {.columns}\n\n::: {.column}\n\nThis code runs the first simple regression in Wooldridge's Econometrics book.\n\n$\\text{wage} = \\alpha + \\beta_1 \\text{educ} + \\epsilon$\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\lucasmeyer\\AppData\\Local\\Temp\\ipykernel_58788\\4246996135.py:13: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n  reg_table = pd.read_html(res.summary().\n```\n:::\n\n::: {.cell-output .cell-output-display}\n| var   |   coef |   s.e. |     t |   p-val |\n|:------|-------:|-------:|------:|--------:|\n| int   |  -0.9  |   0.68 | -1.32 |    0.19 |\n| educ  |   0.54 |   0.05 | 10.17 |    0    |\n:::\n:::\n\n\n:::\n::: {.column}\n\n```python\n# Load the data\ndf_wage = pd.read_csv(\"data/wage1.csv\")\n\n# Create an OLS model using R syntax\nmod = smf.ols(formula=\"wage ~ educ\",\n              data=df_wage)\n\n# Fit the model\nres = mod.fit()\n\n# Show the results\nreg_table = pd.read_html(res.summary().\n  tables[1].as_html(), header=0)[0]\ndisplay(Markdown(reg_table.\n  to_markdown(index=False)))\n```\n:::\n::::\n\n\n\n# Presentations in Quarto\n\n## Basic slide syntax\n\n:::: {.columns}\n\n::: {.column}\nTo create slides, you create sections \nwith `#`, titles with `##`, and bullets \nwith `-`.\n\n### Content types\n\n- You can add several types of content\n    - code (use backticks)\n    - images\n    - diagrams\n    - tables\n    - etc.\n:::\n\n::: {.column}\n\n```markdown\n## Basic slide syntax\n\nTo create slides, you create sections \nwith `#`, titles with `##`, and bullets \nwith `-`.\n\n### Content types\n\n- You can add several types of content\n    - code (use backticks)\n    - images\n    - diagrams\n    - tables\n    - etc.\n```\n:::\n::::\n\n\n\n## Creating PowerPoint slides\n\n:::: {.columns}\n::: {.column}\nTo generate a presentation from a `.qmd` file, add `format: pptx` to the YAML front-matter.\n\nQuarto will use the \n[pandoc PowerPoint rules](https://pandoc.org/MANUAL.html#powerpoint-layout-choice) \nto render the content from the `.qmd` into `.pptx`.\n\nThe \"pandoc rules\" limit the flexibility to create PowerPoint presentations. \nQuarto has better presentation support for `revealjs` and `beamer`. \n:::\n\n::: {.column}\n- PowerPoint can use a **template** with _only_ these layouts:\n    - Title Slide\n    - Title and Content\n    - Section Header\n    - Two Content\n    - Comparison\n    - Content with Caption\n    - Blank\n\n:::\n::::\n\n\n\n## PowerPoint layout rules\n\nThe rules are available at: <br />\n<https://pandoc.org/MANUAL.html#powerpoint-layout-choice>\n\n- **Title Slide:** created from metadata fields like `title` and `author`\n- **Section Header:** created from the top-level headings (`#`)\n- **Two Content:** used when `.qmd` source contains `:::: {.columns}` and only **text** content. [Previous slide](https://raw.githubusercontent.com/lucas-a-meyer/using-quarto/main/slides/_powerpoint-slides.qmd) is an example.\n- **Comparison:** same as \"Two Content\", but content of columns is not text\n- **Content with Caption:** used when slide has non-text content, but no columns\n- **Title and Content:** whatever doesn't fit the rules above.\n\n\n\n## PowerPoint templates\n\nBy adding a `reference-doc` entry to your YAML, you can tell\nQuarto (and pandoc) to use a file as a template for the format\nof your presentation. \n\nThe \"Slide Master\" needs to contain layouts named as per the previous slide (e.g. \"Comparison\").\n\nThis allows you a lot of flexibility in the design of your\nslide deck, even if it is for just the small number of layouts\nthat were listed in the previous slide.\n\nYou can control fonts, add background images, page numbering, etc.\n\n```yaml\n---\ntitle: \"Using Quarto for everything\"\nformat: pptx\nreference-doc: templates/template.pptx\nauthor: Lucas A. Meyer\ndate: 2022-07-14\n---\n```\n\n\n\n\n## Best feature: generate content dynamically\n\nLet's say you're presenting a project about population dynamics but you \ndon't know which world leaders are coming to the conference. \n\nOn the presentation day, you learn that Italy, China, Brazil, India, Japan and Nigeria are attending.\n\nYou can use Python or R to automatically generate slides.\n\n## Generating slides with Python\n\nThe next slides/sections were generated using the code below:\n\n```python\n\ndf_dr = pd.read_csv(\"data/dr.csv.gz\", compression=\"gzip\")\ndf_pop = pd.read_csv(\"data/pop_brackets.csv.gz\", compression=\"gzip\")\nyears = [2000, 2025, 2050, 2075, 2100]\nregions = [\"Italy\", \"China\", \"Brazil\", \"India\", \"Japan\", \"Nigeria\"]\n\nfor name in regions:\n    display(Markdown(f\"## Age and Population Pyramids for {name}\"))\n    display(Markdown(f'<div class=\"columns\">'))\n    display(Markdown(f'<div class=\"column\">'))\n    plot_dependency_ratio(df_dr[df_dr.Location == name])\n    display(Markdown(f'</div>'))\n    display(Markdown(f'<div class=\"column\">'))\n    plot_population_pyramid_series(df_pop[df_pop[\"Location\"]==name], years)\n    display(Markdown(f'</div>'))\n    display(Markdown(f'</div>'))\n```\n\n## Age and Population Pyramids for Italy\n<div class=\"columns\">\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-4.png){width=597 height=435}\n</div>\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-7.png){width=577 height=415}\n</div>\n</div>\n## Age and Population Pyramids for China\n<div class=\"columns\">\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-13.png){width=597 height=435}\n</div>\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-16.png){width=577 height=415}\n</div>\n</div>\n## Age and Population Pyramids for Brazil\n<div class=\"columns\">\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-22.png){width=597 height=435}\n</div>\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-25.png){width=577 height=415}\n</div>\n</div>\n## Age and Population Pyramids for India\n<div class=\"columns\">\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-31.png){width=597 height=435}\n</div>\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-34.png){width=577 height=415}\n</div>\n</div>\n## Age and Population Pyramids for Japan\n<div class=\"columns\">\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-40.png){width=597 height=435}\n</div>\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-43.png){width=577 height=415}\n</div>\n</div>\n## Age and Population Pyramids for Nigeria\n<div class=\"columns\">\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-49.png){width=597 height=435}\n</div>\n<div class=\"column\">\n![](index_files/figure-html/cell-8-output-52.png){width=588 height=415}\n</div>\n</div>\n\n\n# Generating a website\n\n## Changing one line creates a website\n\n```{.yaml code-line-numbers=\"3\"}\n---\ntitle: \"Quarto with Python\"\nformat: html\n    # revealjs:\n    #     incremental: false\n    #     theme: [simple, revealjs-customizations.scss]\n    #     title-slide-attributes:\n    #         data-background-image: images/data-viz-bg.jpg\n    #         data-background-size: contain\n    #         data-background-position: right\n\nauthor: Lucas A. Meyer\ndate: 2022-07-14\n---\n```\n<br />\n\nAdding or changing the format to `html` will create a [website](https://www.meyerperin.com/using-quarto/){preview-link=\"false\"}.\n\n\n\n## Screenshot of website\n\n![](images/website.png)\n\n\n\n# Scholarly articles\n\n## Writing scholarly articles\n\nI reused some of the content of this presentation to create two scholarly-looking articles. \n\nThe purpose of the articles is just to show how easy it is to generate them with Quarto, they don't contain original research. \n\nQuarto adds cross-reference, citations and bibliography support to Markdown.\n\nThe relevant files are:\n\n- [Quarto source file](https://raw.githubusercontent.com/lucas-a-meyer/using-quarto/main/article.qmd)\n- [Microsoft Word output](https://www.meyerperin.com/using-quarto/article.docx)\n- [LaTeX PDF output](https://www.meyerperin.com/using-quarto/article.pdf)\n\n\n\n## Scholarly article screenshots\n\n:::: {.columns}\n::: {.column}\n\n![PDF version of the article](images/pdf-screenshot.png)\n\n:::\n\n::: {.column}\n\n![Microsoft Word version of the article](images/word-screenshot.png)\n\n:::\n::::\n\n\n\n## Citations and Footnotes\n\nCitations don't work on presentations, but are easy to add to articles. \n\nYou need to reference a BibTex file in the YAML front-matter `bibliography: references.bib`. Quarto supports any of the 8000+ [Citation Style Languages](https://citationstyles.org/) and will generate the \"**References**\" section automatically.\n\nYou can cite by using `[@citation-name]` in your text. Please check the [article .qmd source](https://raw.githubusercontent.com/lucas-a-meyer/using-quarto/main/article.qmd)\nand the [PDF](https://www.meyerperin.com/using-quarto/article.pdf) and [DOCX](https://www.meyerperin.com/using-quarto/article.docx) outputs.\n\nGenerating footnotes is also easy. Using `[^ref]` links to a footnote, and `[^ref: content of the footnote]` generates its content[^f1].\n\n[^f1]: You can use footnotes in presentations and websites, too. In PowerPoint, they appear in the appendix.\n\n\n\n## Cross references\n\n:::: {.columns}\n::: {.column}\n\nThe [Quarto guide](https://quarto.org/docs/guide/) has a great section on [cross-references](https://quarto.org/docs/authoring/cross-references.html). I cover only the main points.\n\nTo create a cross-referenceable figure, section or equation, you need to tag it with its corresponding prefix, respectively \"fig\", \"sec\" and \"eq\".\n\nTo tag it, use the following syntax: `#prefix-name`.\n\n:::\n::: {.column}\n\nFor example, when declaring a figure, you can use:\n\n``` markdown\n![Elephant](elephant.png){#fig-elephant}\n```\n\nLater, you can refer to it using:\n\n``` markdown\nSee @fig-elephant for an illustration.\n```\n\n:::\n::::\n\n\n\n# Books in Quarto\n\n## Books in Quarto\n\nYou can also write books with quarto. From the same collection of `.qmd` files, Quarto can generate:\n\n- ePub\n- PDF\n- Online book\n\nTwo recent examples are:\n\n- [Hands-on Programming in R](https://jjallaire.github.io/hopr/), by Garrett Grolemund [(source)](https://github.com/jjallaire/hopr/)\n- [Python for Data Analysis, 3E](https://wesmckinney.com/book/), by Wes McKinney [(source)](https://github.com/wesm/pydata-book/tree/3rd-edition)\n\n## Hands-on Programming in R\n\nThis is a free [book](https://jjallaire.github.io/hopr/), and you can see the Quarto [(source)](https://github.com/jjallaire/hopr/) that generated it.\n\n![](images/hands-on-programming-with-r.png)\n\n## Python for Data Analysis, 3E\n\nThis is another free [book](https://wesmckinney.com/book/), and you can see the Quarto [(source)](https://github.com/wesm/pydata-book/tree/3rd-edition) that generated it.\n\n![](images/python-data-analysis-book.png)\n\n\n\n\n\n\n# Should I use Quarto?\n\n## Where Quarto excels (July 2022)\n\n:::: {.columns}\n::: {.column}\n\n### Articles: maybe\n\nI think QuartoÂ® is more helpful for a team that already uses Git **with** Python notebooks or LaTeX to write articles. \n\nMicrosoft Word collaboration through SharePoint and Teams is easier than Git and Quarto... but it's not reproducible.\n\n### Python notebook: excellent\n\nQuarto adds features to Python notebooks without detracting anything. You just need a few YAML lines.\n:::\n\n::: {.column}\n\n### Blog: excellent\n\nQuarto allowed me to have a scriptable, Python-based [blog](https://www.meyerperin.com). I wrote code to post new articles to Twitter and LinkedIn.\n\n### Presentations: maybe\n\nGreat for RevealJS. For PPT, render process -> long edit cycle. Useful for:\n\n- *a lot* of dynamic content\n- Reproducibility needs\n- Collaborators used to Git/Beamer \n\n:::\n::::\n\n\n\n# Where to go next\n\n## Next Steps\n\n- The Quarto website has great tutorials:\n    - [Jupyter](https://quarto.org/docs/get-started/hello/jupyter.html)\n    - [VSCode](https://quarto.org/docs/get-started/hello/vscode.html)\n\n- If you have multiple input files (e.g., [blog](https://www.meyerperin.com) or book), you can create a [project](https://quarto.org/docs/projects/quarto-projects.html). This allows rendering multiple files that link to each other.\n    - This also allows combining Python and R natively for the same project\n    - Some writers can use R, some can use Python, their content can link to each other as long as they're in different `.qmd` files.\n\n- Projects can have pre-render and post-render steps in Python, R, Lua and shell script. I tend to use shell scripts that call other scripts.\n\n\n\n::: {.content-visible unless-format=\"pptx\"}\n## Hacks {background-color=\"black\" background-image=\"images/hacks.png\" background-size=\"350px\" background-position=\"top right\"}\n\nQuarto is under active development, and quickly reaching v1.0. While creating this content, I had to do some workarounds.\n\n1. I created a [script](https://github.com/quarto-dev/quarto-cli/discussions/1232) to quickly install the latest version\n2. Mermaid diagrams blank in PPTX. [Bug](https://github.com/quarto-dev/quarto-cli/issues/1159) quickly fixed.\n3. Mermaid diagrams blank in RevealJS. Workaround: refresh.\n4. HTML website and RevealJS from same source: images disappear\n    - Workaround: add `self-contained: true` to YAML front-matter\n5. Pandoc large monospaced font size in PowerPoint. Workaround: [script](https://github.com/quarto-dev/quarto-cli/discussions/1272).\n6. The decorations on this slide only appear on RevealJS, by design.\n7. Slide with article screenshots renders weird in HTML, no workaround.\n\n\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}